*** Settings ***
Documentation     Variables and keywords that are often needed when testing web apps.\n\nCopyright (C) 2012 Harri Paavola harri.paavola@gmail.com https://github.com/Harri/Robot-Framework-Helpers\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n"Software"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Library           Selenium2Library
Library           String

*** Variables ***
@{strings}        qwertASDFG    1234567890    öåÖÅŔÔßÇţű    ВГДЕЗабежз    إبثحذشقغظئ    啊埃鞍肮岸些濡糟貸鳴    *?=)(/&%¤#
@{valid emails}    foo@example.com    foo@bar.example    foo+bar@example.com    "foo\@bar"@example.com    "foo bar"@example.com    "foo\\bar"@example.com    "foo@bar"@example.com
...               foo/bar=xyzzy@example.com    $fobar@example.com    !foo!bar%xyzzy@example.com
@{invalid emails}    foobar    foo@bar    @foobar

*** Keywords ***
Verify Label
    [Arguments]    ${locator}    ${label}
    [Documentation]    Verifies that label element identified by locator has tet label.
    Element Text Should Be    css=label[for=${locator}]    ${label}

Verify Placeholder
    [Arguments]    ${locator}    ${placeholder}
    [Documentation]    Verifies that element identified by locator has placeholder attribute with value of placeholder.
    ${attr}    Get Element Attribute    ${locator}@placeholder
    Should Be Equal    ${attr}    ${placeholder}

Go To And Verify Page
    [Arguments]    ${url}    ${title}=${empty}
    [Documentation]    Navigates the active browser instance to the provided URL.\nVerifies that current URL is exactly url.\nVerifies that current page title equals title.
    Go To    ${url}
    Location Should Be    ${url}
    Title Should Be    ${title}

Input Text And Verify Field
    [Arguments]    ${locator}    ${text}    ${label}=${empty}    ${placeholder}=${empty}
    [Documentation]    Waits until page contain element identified by locator.\nTypes the given text into text field identified by locator.\nVerifies that proper label element and placeholder attribute are found.\nVerifes that text field value is what it was set to.
    Wait Until Page Contains Element    ${locator}
    Input Text    ${locator}    ${text}
    Run Keyword Unless    '${label}'=='${empty}'    Verify Label    ${locator}    ${label}
    Run Keyword Unless    '${placeholder}'=='${empty}'    Verify Placeholder    ${locator}    ${placeholder}
    ${value}    Get Value    ${locator}
    Should Be Equal As Strings    ${value}    ${text}

Input Password And Verify Field
    [Arguments]    ${locator}    ${password}    ${label}=${empty}    ${placeholder}=${empty}
    [Documentation]    Waits until page contain element identified by locator.\nTypes the given password into text field identified by locator.\nVerifies that proper label element and placeholder attribute are found.
    Wait Until Page Contains Element    ${locator}
    Input Password    ${locator}    ${password}
    Run Keyword Unless    '${label}'=='${empty}'    Verify Label    ${locator}    ${label}
    Run Keyword Unless    '${placeholder}'=='${empty}'    Verify Placeholder    ${locator}    ${placeholder}

Select Radio Button And Verify Field
    [Arguments]    ${group_name}    ${id}    ${name}    ${label}=${empty}
    [Documentation]    Waits until page contain element identified by locator.\nSets selection of radio button group identified by group_name to name.\nThe radio button to be selected is located by two arguments: - group_name is used as the value of the radio input - name is used for the name attribute.\nVerfies that proper label element is found and that selected radio button is really selected.
    Wait Until Page Contains Element    ${id}
    Select Radio Button    ${group_name}    ${name}
    Verify Label    ${id}    ${label}
    Radio Button Should Be Set To    ${group_name}    ${name}

Select Checkbox And Verify Field
    [Arguments]    ${id}    ${name}    ${label}=${empty}
    [Documentation]    Waits until page contain element identified by id.\nSelects checkbox identified by name.\nVerifies that proper label element and placeholder attribute are found.\nVerifies checkbox identified by locator is selected/checked.
    Wait Until Page Contains Element    ${id}
    Select Checkbox    ${name}
    Run Keyword Unless    '${label}'=='${empty}'    Verify Label    ${id}    ${label}
    Checkbox Should Be Selected    ${name}

Select From List And Verify Field
    [Arguments]    ${locator}    ${item}    ${label}=${empty}
    [Documentation]    Selects item from list identified by locator.\nIf label is set, verifies that it is correct.
    Wait Until Page Contains Element    ${locator}
    Run Keyword Unless    '${label}'=='${empty}'    Verify Label    ${locator}    ${label}
    Select From List    ${locator}    ${item}

Generate Random Integer In Range
    [Arguments]    ${min}=0    ${max}=sys.maxint
    [Documentation]    Returns random integer between min and max values. Min defaults to 0 and max to maxint.
    ${int}    Evaluate    random.randint(${min}, ${max})    random,sys
    [Return]    ${int}

Element Should Not Contain
    [Arguments]    ${haystack}    ${needle}
    [Documentation]    Verifies that ${needle} is not part of ${haystack}
    Wait Until Page Contains Element    ${haystack}
    ${error message}    Run Keyword And Expect Error    *    Element Should Contain    ${haystack}    ${needle}
    Should Contain    ${error message}    Element '${haystack}' should have contained text '${needle}' but its text was

Wait Until Element Is Visible
    [Arguments]    ${locator}
    [Documentation]    Waits until element is visible.\nTimeouts after Selenium Timeout.
    ${timeout}    Get Selenium Timeout
    Wait Until Keyword Succeeds    ${timeout}    1    Element Should Be Visible    ${locator}

Wait Until Element Is Not Visible
    [Arguments]    ${locator}
    [Documentation]    Waits until element is not visible.\nTimeouts after Selenium Timeout.
    ${timeout}    Get Selenium Timeout
    Wait Until Keyword Succeeds    ${timeout}    1    Element Should Not Be Visible    ${locator}

Wait Until Element Contains
    [Arguments]    ${locator}    ${expected}
    [Documentation]    Waits until specified element contains specified text.\nTimeouts after Selenium Timeout.
    ${timeout}    Get Selenium Timeout
    Wait Until Keyword Succeeds    ${timeout}    1    Element Should Contain    ${locator}    ${expected}

Wait Until Element Does Not Contain
    [Arguments]    ${locator}    ${expected}
    [Documentation]    Waits until specified element does not contain specified text.\nTimeouts after Selenium Timeout.
    ${timeout}    Get Selenium Timeout
    Wait Until Keyword Succeeds    ${timeout}    1    Element Should Not Contain    ${locator}    ${expected}

Run Keyword And Log Warning
    [Arguments]    ${keyword}    @{arguments}
    [Documentation]    Runs given keyword with given parameters and logs the error message as a warning.\nThis is useful when some features of the product under test are not yet implemented and you don't want to fail tests because of that.
    ${error code}    ${error msg}    Run Keyword And Ignore Error    ${keyword}    @{arguments}
    Log    ${error msg}    WARN

Input Validation For Field
    [Arguments]    ${field}    ${rest field}    ${value}    ${pass}=pass
    [Documentation]    Inputs given value to given field.\nThen focuses to given rest field so that client side input validation is triggered.\nThen verifies that user is shown or not shown error label as specified in pass argument.
    Input Text And Verify Field    ${field}    ${value}
    Focus    ${rest field}
    Run Keyword If    '${pass}'=='pass'    Element Should Not Be Visible    css=label[for=${field}].error
    Run Keyword Unless    '${pass}'=='pass'    Element Should Be Visible    css=label[for=${field}].error

Verify Field Content
    [Arguments]    ${locator}    ${content}
    ${value}    Get Value    ${locator}
    Should Be Equal As Strings    ${value}    ${content}

